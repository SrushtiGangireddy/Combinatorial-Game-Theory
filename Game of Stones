/* This game of stones has a pile of n stones from which each player needs to take 2 / 3 or 5 stones. 
The player that is not able to take these number of stones or that does not have valid move loses.

The state of x changes to (x-2) / (x-3) / (x-5)

X is a winning state if (x-2) / (x-3) / (x-5) is a losing state or else x is a losing state

dp[numStones]

dp[0] = 0 (Since there are no valid moves when number of stones is 0)
dp[1] = 0 (Since the player can only take 2/3/5)
dp[2] = 1 
dp[3] = 1
dp[5] = 1

if dp[x-2] = 0 or dp[x-3] = 0 or dp[x-5] = 0 then dp[x] = 1 else dp[x] = 0

If the number of stones took is 2 or 3 or 5 and the remaining number of stones becomes 0 then there would not be any move for the other player.

*/

import java.io.*;
import java.util.*;

public class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        
        int n = sc.nextInt();
        
        for(int i=0;i<n;i++){
            int numStones = sc.nextInt();
            
            if(dp(numStones) == 0){
                System.out.println("Second");
            }else if(dp(numStones) == 1){
                System.out.println("First");
            }
        }
        
    }
    
    public static int dp(int stones){
        if(stones == 0){
            return 0;
        }else if(stones == 1){
            return 0;
        }else if(stones == 2){
            return 1;
        }else if(stones == 3){
            return 1;
        }else if(stones == 5){
            return 1;
        }else if((dp(stones - 2) == 0) || (dp(stones - 3) == 0) || (dp(stones - 5) == 0)){
            return 1;
        }
        return 0;
    }
    
}
